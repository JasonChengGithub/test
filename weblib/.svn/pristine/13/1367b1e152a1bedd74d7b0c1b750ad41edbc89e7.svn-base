//全局Lny
function Lny(apiNames) {
    this.domainName = "http://qyh.weidingplus.com/";
    this.loading = false;
    this.apiNames = apiNames
}
function onlyIntegerKeyPress(me, event) {
    event = event || window.event || arguments.callee.caller.arguments[0];
    //console.log(event);
    var charCode2;
    if ('charCode' in event) {//IE7 and IE8 no charCode
        charCode2 = event.charCode;
    } else {
        //console.log('no charCode');
        charCode2 = event.keyCode;
    }
    //console.log(charCode2);
    if (event.keyCode === 8/*back*/ || event.keyCode === 13/*Enter*/ || event.keyCode === 9/*Tab*/ || event.keyCode === 37/*<- */ || event.keyCode === 39/* ->*/) {
        return true;
    } else if (charCode2 < 48 || charCode2 > 57) {/*0-9*/
        event.returnValue = false;
        return false;
    } else {
        var num = $(me).val() + (charCode2 - 48);
        var max = parseInt($(me).attr("max") ? $(me).attr("max") : Number.MAX_VALUE);
        var min = parseInt($(me).attr("min"))
        if (num >= min && num <= max) {
            return true;
        } else {
            return false;
        }
    }
};
!(function ($, L) {
    //AJAX跨域配置
    $.support.cors = true;
    L.prototype = {
        getTableCheckedData: function (table) {
            var checkBoxs = table.$("[name=checkbox]:checked")
            var checkedData = [];
            if (checkBoxs.length > 0) {
                for (var i = 0; i < checkBoxs.length; i++) {
                    checkedData.push(table.row(checkBoxs.eq(i).attr("data-rowIndex")).data())
                }
            }
            return checkedData
        },
        delTableRow: function (idKey, listKey, urlname, data, callback) {
            var params = {};
            var arr = []
            for (var i = 0; i < data.length; i++) {
                var param = {};
                param[idKey] = data[i][idKey]
                arr.push(param)
            }
            params[listKey] = arr;
            l.ajax(urlname, params, function (data) {
                callback(data)
            })
        },
        addApi: function (apis) {
            for (var key in apis) {
                this.apiNames[key] = apis[key]
            }
            return this.apiNames
        },
        getApiUrl: function (apiName) {
            return this.domainName + this.apiNames[apiName]
        },
        getUrlParam: function (k) {//获取地址栏参数，k未键名
            var m = new RegExp("(^|&)" + k + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(m);
            if (r != null) return decodeURI(r[2]); return null;
        },
        dateFormat: function (d, fmt) {//格式化日期，d未new Date(),fmt为格式
            var o = {
                "M+": d.getMonth() + 1, //月份   
                "d+": d.getDate(), //日   
                "H+": d.getHours(), //小时   
                "m+": d.getMinutes(), //分   
                "s+": d.getSeconds(), //秒   
                "q+": Math.floor((d.getMonth() + 3) / 3), //季度   
                "S": d.getMilliseconds() //毫秒   
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (d.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        },
        dateToUnix: function (d) {
            return new Date(Date.parse(d.toString().replace(/-/g, "/"))).getTime()
        },
        ajax: function (apiName, params, success) {
            var loader = layer.load(1, {
                shade: [0.3, '#000'] //0.1透明度的白色背景
            });
            $.ajax({
                url: this.getApiUrl(apiName),
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(params),
                contentType: "application/json; charset=utf-8",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                },
                complete: function (result) {
                    layer.close(loader)
                },
                error: function (result, status, error) {//服务器响应失败处理函数
                    console.log(error)
                },
                success: function (result) {
                    if (result.success) {
                        success(result.data, result.message)
                    } else {
                        console.log(result)
                        layer.alert(result.message, { icon: 0, }, function (index) {
                            layer.close(index);
                        });
                    }
                }
            })
        }
    }
    //其他配置
    //page默认配置
    if ($.fn.page) {
        $.fn.page.defaults = {
            pageSize: 10,
            pageBtnCount: 9,
            firstBtnText: '首页',
            lastBtnText: '尾页',
            prevBtnText: '上一页',
            nextBtnText: '下一页',
            showJump: true,
            jumpBtnText: 'GO',
            showPageSizes: true,
            pageSizeItems: [10, 20, 40],
            remote: {
                pageIndexName: 'currentPage',     //请求参数，当前页数，索引从1开始
                pageSizeName: 'pageSize',       //请求参数，每页数量
                totalName: 'totalNumber'              //指定返回数据的总数据量的字段名
            }
        };
    }


    $.fn.filterfrom = function (options) {
        var $me = this;
        var defaults = {
            maxLength: 5,
            conditions: [],
            onSearch: function () { },
            onReset: function () { }
        }
        options = $.extend({}, defaults, options)

        var tableHtml = '<table class="from-table"><tr>'
        var cArr = options.conditions;
        $me.selectList = {};
        $me.ajaxing = {};
        var createHtml = function (e) {
            var domHtml = '';
            switch (e.type) {
                case "text":
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input type="text" name="' + e.name + '" placeholder="' + (e.placeholder ? e.placeholder : '') + '" value="' + (e.defaultValue ? e.defaultValue : '') + '" class="input-text"></td>'
                    break
                case "number":
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input min="1" style="width:100%" type="number" name="' + e.name + '" placeholder="' + (e.placeholder ? e.placeholder : '') + '" value="' + (e.defaultValue ? e.defaultValue : '') + '" class="input-text"></td>'
                    break
                case "select":
                    var optionHtml = "", sl = [];
                    if (e.ajax) {
                        if (e.ajax.api) {
                            $me.ajaxing[e.name] = true;
                            l.ajax(e.ajax.api, {}, function (selectList) {
                                $me.selectList[e.name] = [];
                                $.each(selectList, function (index, v) {
                                    $me.selectList[e.name].push({
                                        value: v[e.ajax.valueName || "value"] || "",
                                        text: v[e.ajax.textName || "text"] || "",
                                        children: v[e.ajax.childrenName || "children"] || []
                                    })
                                })
                                $me.resetSelect(e.name, $me.selectList[e.name])
                                if (e.ajax.child) {
                                    $me.find("select[name=" + e.name + "]").on("change", function (event) {
                                        $.each($me.selectList[e.name], function (index, v) {
                                            if (v.value == event.target.value) {
                                                $me.selectList[e.ajax.child] = [];
                                                $.each(v.children, function (index2, v2) {
                                                    $me.selectList[e.ajax.child].push({
                                                        value: v2[e.ajax.valueName || "value"] || "",
                                                        text: v2[e.ajax.textName || "text"] || "",
                                                        children: v2[e.ajax.childrenName || "children"] || []
                                                    })
                                                })
                                                $me.resetSelect(e.ajax.child, $me.selectList[e.ajax.child])
                                            }
                                        })
                                    })
                                    $me.selectList[e.ajax.child] = [];
                                    $.each($me.selectList[e.name][0].children, function (index, v) {
                                        $me.selectList[e.ajax.child].push({
                                            value: v[e.ajax.valueName || "value"] || "",
                                            text: v[e.ajax.textName || "text"] || "",
                                            children: v[e.ajax.childrenName || "children"] || []
                                        })
                                    })
                                    $me.resetSelect(e.ajax.child, $me.selectList[e.ajax.child])
                                }
                                $me.ajaxing[e.name] = false;
                            })
                        } else if (e.ajax.parent && $me.selectList[e.name]) {

                            sl = $me.selectList[e.name]
                        }
                    } else {
                        $me.selectList[e.name] = e.selectList
                        sl = $me.selectList[e.name]
                    }
                    for (var i = 0; i < sl.length; i++) {
                        optionHtml += '<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>'
                    }
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><div class="select-box"><select class="select" size="1" name="' + e.name + '">' + optionHtml + '</select></div></td>'
                    break
                case "date":
                    var datePickerOption = (e.minDate ? 'minDate:' + e.minDate + ',' : '') + (e.maxDate ? 'maxDate:' + e.maxDate + ',' : '') + (e.dateFmt ? 'dateFmt:\'' + e.dateFmt + '\',' : '')
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input type="text" name="' + e.name + '" placeholder="" value="' + (e.defaultValue ? e.defaultValue : '') + '" onfocus="WdatePicker({' + datePickerOption + '})" id="' + e.id + '" class="input-text Wdate"></td>'
                    break
            }
            return domHtml
        }

        for (var i = 0; i < cArr.length; i++) {
            if (i % options.maxLength == 0 && i != 0) {
                tableHtml += '</tr><tr>'
            }
            tableHtml += createHtml(cArr[i]);
        }
        if (cArr.length % options.maxLength == 0) {
            tableHtml += '</tr><tr>'
        }
        tableHtml += '<td width="20"></td><td><button data-name="search" class="btn btn-primary" type="button"><i class="Hui-iconfont">&#xe709;</i> 查询</button><button data-name="reset" class="btn ml-20  btn-primary" type="button"><i class="Hui-iconfont">&#xe66c;</i> 重置</button></td>'
        tableHtml += '</tr></table>'
        var $table = $(tableHtml)
        $me.append($table)

        $me.on("click", "button", function () {
            var name = $(this).attr("data-name");
            switch (name) {
                case "search":
                    options.onSearch($me.serializeArray())
                    break;
                case "reset":
                    $me[0].reset()
                    options.onReset($me.serializeArray())
                    break;
            }
        })
        $me.resetSelect = function (name, sl) {
            var $select = $me.find("select[name=" + name + "]");
            $select.html("");
            for (var i = 0; i < sl.length; i++) {
                $select.append('<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>');
            }
        };
        return $me
    }
    $.fn.detailLayer = function (options) {
        var $me = this;
        // 参数配置start
        var defaults = {
            conditions: [],
            onSave: function () { console.log("保存") },
            onAdd: function () { console.log("新增") },
        }
        options = $.extend({}, defaults, options);
        // 参数配置end
        //属性声明start
        $me.conditions = options.conditions;//环境参数
        $me.onAdd = options.onAdd;//新增回调函数
        $me.onSave = options.onSave;//新增保存函数
        $me.isAdd = true;//是否是新增
        $me.mylayer = {};//弹出层对象
        $me.selectList = {};//下拉列表对象集合
        $me.address = [];//地址数据
        $me.ajaxing = {};//ajaxing请求状态集合
        $me.items = [];//表单子元素请求状态集合
        // 特殊控制
        $me.controlKey = options.controlKey || null//根据哪个key来执行特殊控制
        $me.controlValue = null//哪些controlKey字段的value属性值执行特殊控制
        //属性声明end

        //结构构建start
        var $page = $('<div class="page-container" ></div>')//页面容器
        var $detailForm = $('<form class="form form-horizontal"></form>')//详情表单容器
        var $detailFormControlLine = $('<div class="row cl"></div>')//详情表单控制行
        var $detailFormControlBtnBox = $('<div class="col-9 f-l col-offset-2"></div>')//详情表单控制按钮组
        var $btnSave = $('<button data-name="save" class="btn btn-primary" type="button"><i class="Hui-iconfont">&#xe632;</i> 保存</button>')//保存按钮
        var $btnClose = $('<button data-name="close" class="btn btn-primary ml-10" type="button">&nbsp;&nbsp;取消&nbsp;&nbsp;</button>')//取消按钮
        $btnSave.on("click", function () {
            if ($me.getData()) {
                if ($me.isAdd) {
                    $me.onAdd($me, $me.getData())
                } else {
                    $me.onSave($me, $me.getData())
                }
            }
        })
        $btnClose.on("click", function () {
            $me.close()
        })
        $detailFormControlBtnBox.append([$btnSave, $btnClose])
        $detailFormControlLine.append($detailFormControlBtnBox)
        function FormItem(data, key) {//表单子元素构造函数
            if (!data.type) {
                console.warn("FormItem:key为" + key + "的type不存在")
            }
            if (!data.name) {
                console.warn("FormItem:key为" + key + "的name不存在")
            }
            this.type = data.type;//类型
            this.name = data.name;//名字

            this.label = data.label || "";//标题
            this.must = data.must || false;//是否必填

            this.defaultValue = data.defaultValue//text,textarea,number,date,hidden特有
            this.placeholder = data.placeholder//text,textarea特有

            this.data = data;
            this.key = key;

            this.value = null;
            this.$dom = this.createDom()
            return this
        }
        FormItem.prototype.getValue = function () {
            var that = this;
            var _d = "";
            switch (that.type) {
                case "address":
                    _d = "";
                    _d += (that.$dom.find("[name=address1]").val() ? that.$dom.find("[name=address1]").val() : "") + "_";
                    _d += (that.$dom.find("[name=address2]").val() ? that.$dom.find("[name=address2]").val() : "") + "_";
                    _d += (that.$dom.find("[name=address3]").val() ? that.$dom.find("[name=address3]").val() : "");
                    break
                case "pickTree":
                    _d = myPickTree.getDataByName(that.name)
                    break
                default://hidden,text,number,textarea,date,select
                    _d = that.$dom.find("[name=" + that.name + "]").val()
                    break;
            }
            return _d
        }
        FormItem.prototype.createDom = function () {
            var that = this;
            var $domHtml = $('<div data-key="' + that.key + '"  class="row cl"><label class="form-label  col-2 f-l"><i style="color:red;' + (that.must ? '' : 'display:none') + '">* </i><span>' + that.label + '</span>：</label></div>')
            var $dom;
            switch (that.type) {
                case "hidden"://隐藏域
                    $dom = $('<div><input data-key="' + that.key + '" type="hidden" name="' + that.name + '" value="' + (that.defaultValue ? that.defaultValue : '') + '"></div>')
                    $domHtml = $dom;
                    break
                case "text"://单行文本
                    $dom = $('<div class="col-9 f-l"><input  type="text" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '" value="' + (that.defaultValue ? that.defaultValue : '') + '" class="input-text"></div>')
                    $domHtml.append($dom);
                    break
                case "number"://数字文本
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $num = $('<input min="' + (that.data.min ? that.data.min : 1) + '" max="' + (that.data.max ? that.data.max : "") + '" style="width:100%" onKeyUp="onlyIntegerKeyPress(this,event)" onKeyPress="return onlyIntegerKeyPress(this,event)" onpaste="return false"  type="text" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '" value="' + (that.defaultValue ? that.defaultValue : '') + '" class="input-text">')
                    $dom.append($num)
                    $domHtml.append($dom);
                    break
                case "textarea"://多行文本
                    $dom = $('<div class="col-9 f-l"><textarea class="textarea" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '">' + (that.defaultValue ? that.defaultValue : '') + '</textarea></div>')
                    $domHtml.append($dom)
                    break
                case "date"://日期插件
                    var datePickerOption = (that.data.minDate ? 'minDate:' + that.data.minDate + ',' : '') + (that.data.maxDate ? 'maxDate:' + that.data.maxDate + ',' : '') + (that.data.dateFmt ? 'dateFmt:\'' + that.data.dateFmt + '\',' : '')
                    $dom = $('<div class="col-9 f-l"><input type="text" name="' + that.name + '" placeholder="" value="' + (that.defaultValue ? that.defaultValue : '') + '" onfocus="WdatePicker({' + datePickerOption + '})" id="' + that.data.id + '" class="input-text Wdate"></div>')
                    $domHtml.append($dom);
                    break
                case "select":
                    $dom = $('<div class="col-9 f-l"></div>')
                    var optionHtml = "", sl = [];
                    if (that.data.ajax) {
                        if (that.data.ajax.api) {
                            $me.ajaxing[that.name] = true;
                            l.ajax(that.data.ajax.api, {}, function (selectList) {
                                $me.selectList[that.name] = [];
                                $.each(selectList, function (index, v) {
                                    $me.selectList[that.name].push({
                                        value: v[that.data.ajax.valueName || "value"] || "",
                                        text: v[that.data.ajax.textName || "text"] || "",
                                        children: v[that.data.ajax.childrenName || "children"] || []
                                    })
                                })
                                $me.resetSelect(that.name, $me.selectList[that.name])
                                if (that.data.ajax.child) {
                                    $me.find("select[name=" + that.name + "]").on("change", function (event) {
                                        $.each($me.selectList[that.name], function (index, v) {
                                            if (v.value == event.target.value) {
                                                $me.selectList[that.data.ajax.child] = [];
                                                $.each(v.children, function (index2, v2) {
                                                    $me.selectList[that.data.ajax.child].push({
                                                        value: v2[that.data.ajax.valueName || "value"] || "",
                                                        text: v2[that.data.ajax.textName || "text"] || "",
                                                        children: v2[that.data.ajax.childrenName || "children"] || []
                                                    })
                                                })
                                                $me.resetSelect(that.data.ajax.child, $me.selectList[that.data.ajax.child])
                                            }
                                        })
                                    })
                                    $me.selectList[that.data.ajax.child] = [];
                                    $.each($me.selectList[that.name][0].children, function (index, v) {
                                        $me.selectList[that.data.ajax.child].push({
                                            value: v[that.data.ajax.valueName || "value"] || "",
                                            text: v[that.data.ajax.textName || "text"] || "",
                                            children: v[that.data.ajax.childrenName || "children"] || []
                                        })
                                    })
                                    $me.resetSelect(that.data.ajax.child, $me.selectList[that.data.ajax.child])
                                }
                                $me.ajaxing[that.name] = false;
                            })
                        } else if (that.data.ajax.parent && $me.selectList[that.name]) {
                            sl = $me.selectList[that.name]
                        }
                    } else {
                        $me.selectList[that.name] = that.data.selectList
                        sl = $me.selectList[that.name]
                    }
                    for (var i = 0; i < sl.length; i++) {
                        optionHtml += '<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>'
                    }
                    var $sel = $('<select name="' + that.name + '" value="' + that.defaultValue + '" class="select"></select>')
                    $sel.append(optionHtml)
                    $dom.append($sel);
                    $domHtml.append($dom);
                    break
                case "address":
                    $dom = $('<div class="col-9 f-l row" style="margin-top: 0;padding-left:0;padding-right:0;margin-left:0"></div>');
                    var $col = $('<div class="f-l col-4"></div>')
                    var $addressSelect1 = $('<select name="address1" class="select"></select>')
                    var $addressSelect2 = $('<select name="address2" class="select"></select>')
                    var $addressSelect3 = $('<select name="address3" class="select"></select>')
                    var selectData1 = [];
                    var selectData2 = [];
                    var selectData3 = [];
                    $addressSelect1.on("change", function () {
                        var val = $(this).val()
                        $.each(selectData1, function (i, v) {
                            if (v.value == val) {
                                selectData2 = $me.updateSelect(v.children, $addressSelect2, that.data.ajax)
                                selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.data.ajax)
                            }
                        })
                    })
                    $addressSelect2.on("change", function () {
                        var val = $(this).val()
                        $.each(selectData2, function (i, v) {
                            if (v.value == val) {
                                selectData3 = $me.updateSelect(v.children, $addressSelect3, that.data.ajax)
                            }
                        })
                    })
                    if ($me.address.lenght > 0) {
                        selectData1 = $me.updateSelect($me.address, $addressSelect1, that.data.ajax)
                        selectData2 = $me.updateSelect(selectData1[0].children, $addressSelect2, that.data.ajax)
                        selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.data.ajax)
                    } else {
                        $me.ajaxing[that.name] = true;
                        l.ajax(that.data.ajax.api, {}, function (data) {
                            $me.address = data;
                            selectData1 = $me.updateSelect($me.address, $addressSelect1, that.data.ajax)
                            selectData2 = $me.updateSelect(selectData1[0].children, $addressSelect2, that.data.ajax)
                            selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.data.ajax)
                            $me.ajaxing[that.name] = false;
                        })
                    }
                    $dom.append($col.clone().append($addressSelect1));
                    $dom.append($col.clone().append($addressSelect2));
                    $dom.append($col.clone().append($addressSelect3));
                    $domHtml.append($dom);
                    break;
                case "pickTree":
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $pickTree = $('<div data-id="pickTree" data-name="' + that.name + '" class="pickTree"></div>')
                    var $pickTreeList = $('<ul data-id="pickTreeList" class="cl"></ul>')
                    var $pickTreeAdd = $('<button data-id="pickTreeAdd" class="pickTreeAdd" type="button"></button>')
                    myPickTree.initDataWidthName(that.name)
                    $pickTreeAdd.on("click", function () {
                        myPickTree.open(that.name, that.data.pickType)
                    })
                    $pickTree.append($pickTreeList);
                    $pickTree.append($pickTreeAdd);
                    $dom.append($pickTree);
                    $domHtml.append($dom);
                    break

                case "pickMember":
                    $dom = $('<div class="col-9 f-l"><div id="pickMember" class="pickMember"><ul id="pickMemberList" class="cl"></ul><button data-name="pickMemberAdd" class="pickMemberAdd" type="button"></button></div></div>')
                    $domHtml.append($dom);
                    break

                case "upload":
                    $dom = $('<div class="col-9 f-l"><div class="uploadFile"><ul class="uploadList"></ul><label style="position: relative;" for="uploadBtn" class="btn btn-primary size-S">' + (that.data.btnName ? that.data.btnName : '添加') + '<input id="uploadBtn" data-fileType=\'' + JSON.stringify(that.data.fileType ? that.data.fileType : []) + '\' name="filesName" size="2" class="inputFile"  type="file" /></label><span class="ml-10">' + (that.data.fileType ? ('上传格式要求：' + JSON.stringify(that.data.fileType)) : '') + '</span></div></div>')
                    $domHtml.append($dom);
                    break
                case "option":
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $option = $('<div class="mb-15 option" style="position:relative"><input type="text" name="content" placeholder="' + (that.placeholder ? that.placeholder : '') + '" class="input-text"></div>')
                    var $optionAddBox = $('<div class="optionAddBox"></div>')
                    var $optionAdd = $('<div class="mb-15 optionAdd" style="position:relative"><input type="text" name="content" placeholder="' + (that.placeholder ? that.placeholder : '') + '" class="input-text"></div>')
                    var $removeBtn = $('<a title="删除" class="removeBtn" href="javascript:;" class="ml-5 delete" style="text-decoration: none;font-size: 20px;position: absolute;right: -25px;top: -1px;"><i class="icon Hui-iconfont"></i></a>')
                    $removeBtn.click(function () {
                        $(this).parents(".optionAdd").remove()
                    })
                    $optionAdd.append($removeBtn.clone(true))
                    var $addBtn = $('<span class="btn btn-primary size-S" href="#"><i class="Hui-iconfont">&#xe600;</i> 添加选项</span>')
                    $addBtn.click(function () {
                        $optionAddBox.append($optionAdd.clone(true))
                    })
                    $optionAddBox.append($option.clone())
                    $optionAddBox.append($option.clone())
                    $dom.append($optionAddBox)
                    $dom.append($addBtn)
                    $domHtml.append($dom)
                    break
                default:
                    $dom = $('')
                    $domHtml.append($dom)
                    break
            }
            console.log("{key:" + that.key + ",name:" + that.name + ",type:" + that.type + "} create success!")
            return $domHtml
        }

        $.each($me.conditions, function (i, v) {
            var item = new FormItem(v, i)
            $me.items.push(item);
            $detailForm.append(item.$dom);
        })
        $detailForm.append($detailFormControlLine)
        $page.append($detailForm)
        $me.append($page)
        //结构构建send
        $me.getData = function () {
            var dataObj = {};
            for (var i = 0; i < $me.conditions.length; i++) {
                if (!$me.isHide(i)) {
                    switch ($me.conditions[i].type) {
                        case "text":
                        case "number":
                        case "hidden":
                        case "select":
                        case "textarea":
                            var _d = $me.items[i].getValue()
                            if ($me.conditions[i].must && $.trim(_d) == "") {
                                layer.alert($me.conditions[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return false
                            }
                            dataObj[$me.conditions[i].name] = _d
                            break;
                        case "address":
                            var _d = $me.items[i].getValue();
                            dataObj[$me.conditions[i].name] = _d
                            break;
                        case "date":
                            var _d = $me.items[i].getValue()
                            if ($me.conditions[i].must && $.trim(_d) == "") {
                                layer.alert($me.conditions[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return false
                            }
                            dataObj[$me.conditions[i].name] = L.prototype.dateToUnix(_d)
                            break;
                        case "option":
                            var optionArr = []
                            var con = $detailForm.find('[name=content]')
                            for (var j = 0; j < con.length; j++) {
                                if ((j == 0 || j == 1) && $.trim(con.eq(j).val()) == "" && $me.conditions[i].must) {
                                    layer.alert("至少添加两个选项！", { icon: 0, }, function (index) {
                                        layer.close(index);
                                    });
                                    return
                                }
                                optionArr.push({ "content": con.eq(j).val() })
                            }
                            dataObj[$me.conditions[i].name] = optionArr;
                            break
                        case "pickMember":
                            if ($me.conditions[i].must && getPickMember("department").length == 0 && getPickMember("member").length == 0) {
                                layer.alert($me.conditions[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            dataObj["oaDepartmentList"] = getPickMember("department")
                            dataObj["oaMemberList"] = getPickMember("member")
                            break;
                        case "pickTree":
                            var _d = $me.items[i].getValue()
                            var _obj = $me.conditions[i]
                            var _length = 0;
                            dataObj[_obj.name] = {};
                            for (var key in _obj.pickType) {
                                if (_obj.pickType[key]) {
                                    _length = _length + _d[key].length;
                                    dataObj[_obj.name][_obj.pickType[key]] = _d[key];
                                }
                            }
                            if (_obj.must && _length == 0) {
                                layer.alert($me.conditions[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            break;
                        case "upload":
                            dataObj[$me.conditions[i].name] = getUploadList()
                            break;
                    }
                }
            }
            return dataObj
        }
        $me.open = function (data) {
            for (var key in $me.ajaxing) {
                if ($me.ajaxing[key]) {
                    layer.alert("数据正在初始化，请稍后再试！", { icon: 0, }, function (index) {
                        layer.close(index);
                    });
                    return
                }
            }
            if (!data) {
                data = {};
                $me.isAdd = true;
            } else if (data.isAdd) {
                $me.isAdd = true
            } else {
                $me.isAdd = false;
            }
            if ($me.controlKey) {
                $me.controlValue = data[$me.controlKey]
            }
            for (var i = 0; i < $me.conditions.length; i++) {
                if ($me.conditions[i]) {
                    if ($me.isHide(i)) {
                        $detailForm.find('[data-key=' + i + ']').hide()
                    } else {
                        $detailForm.find('[data-key=' + i + ']').show()
                    }
                    if ($me.isLabel(i)) {//特殊修改
                        $detailForm.find('[data-key=' + i + '] label span').html($me.conditions[i].label + "(分)")
                    } else {
                        $detailForm.find('[data-key=' + i + '] label span').html($me.conditions[i].label)
                    }
                    if (!$me.isAdd) {
                        switch ($me.conditions[i].type) {
                            case "number":
                            case "text":
                            case "hidden":
                            case "textarea":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').val(data[$me.conditions[i].name] || $me.conditions[i].defaultValue || "").attr("disabled", $me.conditions[i].immutableAdd || $me.conditions[i].immutable || false)
                                break;
                            case "date":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').val(l.dateFormat(new Date(data[$me.conditions[i].name]), $me.conditions[i].dateFmt || "")).attr("disabled", $me.conditions[i].immutableAdd || $me.conditions[i].immutable || false)
                                break;
                            case "select":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').attr("disabled", $me.conditions[i].immutableAdd || $me.conditions[i].immutable || false)
                                if ($me.conditions[i].ajax && $me.conditions[i].ajax.parent) {
                                    $.each($me.selectList[$me.conditions[i].ajax.parent], function (index, v) {
                                        if (v.value == data[$me.conditions[i].ajax.parent]) {
                                            $me.selectList[$me.conditions[i].name] = [];
                                            $.each(v.children, function (index2, v2) {
                                                $me.selectList[$me.conditions[i].name].push({
                                                    value: v2[$me.conditions[i].ajax.valueName || "value"] || "",
                                                    text: v2[$me.conditions[i].ajax.textName || "text"] || "",
                                                    children: v2[$me.conditions[i].ajax.childrenName || "children"] || [],
                                                    selected: (v2[$me.conditions[i].ajax.valueName || "value"] == data[$me.conditions[i].name]) ? true : false,
                                                })
                                            })
                                            $me.resetSelect($me.conditions[i].name, $me.selectList[$me.conditions[i].name])
                                        }
                                    });
                                } else {
                                    $detailForm.find('[name=' + $me.conditions[i].name + ']').val(data[$me.conditions[i].name])
                                }
                                break;
                            case "address":
                                var val = data[$me.conditions[i].name] || $me.conditions[i].defaultValue.split("_");
                                var $addressSelect = [$me.items[i].$dom.find("[name=address1]"), $me.items[i].$dom.find("[name=address2]"), $me.items[i].$dom.find("[name=address3]")]
                                var selectData = [];
                                $.each(val, function (ii, vv) {
                                    if (vv != "") {
                                        $addressSelect[ii].val(vv);
                                        if (ii == 0) {
                                            selectData[ii] = $me.updateSelect($me.address, $addressSelect[ii], $me.conditions[i].ajax);
                                        }
                                        if (ii != val.length - 1) {
                                            $.each(selectData[ii], function (j, m) {
                                                if (m.value == vv) {
                                                    selectData[ii + 1] = $me.updateSelect(m.children, $addressSelect[ii + 1], $me.conditions[i].ajax)
                                                }
                                            })
                                        }
                                    }
                                })
                                break
                            case "option":
                                $detailForm.find('.optionAdd').remove();
                                $detailForm.find('[name=content]').val($me.conditions[i].defaultValue || "")
                                if (data[$me.conditions[i].name] && data[$me.conditions[i].name].length) {
                                    var dataArr = data[$me.conditions[i].name]
                                    for (var j = 0; j < dataArr.length; j++) {
                                        if (j == 0 || j == 1) {
                                            $detailForm.find('[name=content]').eq(j).val(dataArr[j].content || "")
                                        } else {
                                            var $optionAdd = $('<div class="mb-15 optionAdd" style="position:relative"><input type="text" name="content" value="' + dataArr[j].content + '" class="input-text"></div>')
                                            var $removeBtn = $('<a title="删除" class="removeBtn" href="javascript:;" class="ml-5 delete" style="text-decoration: none;font-size: 20px;position: absolute;right: -25px;top: -1px;"><i class="icon Hui-iconfont"></i></a>')
                                            $removeBtn.click(function () {
                                                $(this).parents(".optionAdd").remove()
                                            })
                                            $optionAdd.append($removeBtn)
                                            $detailForm.find('.optionAddBox').append($optionAdd)
                                        }
                                    }
                                }
                                break;
                            case "upload":
                                updateUploadList(data[$me.conditions[i].name] || [])
                                break;
                            case "pickMember":
                                drawPickMember(data["oaDepartmentList"] || [], data["oaMemberList"] || []);
                                break;
                            case "pickTree":
                                var _obj = $me.conditions[i];
                                var _d = {};
                                for (var key in _obj.pickType) {
                                    if (_obj.pickType[key]) {
                                        _d[key] = data[_obj.name][_obj.pickType[key]]
                                    }
                                }
                                myPickTree.drawCurData(_obj.name, _d)
                                break;
                        }
                    } else {
                        switch ($me.conditions[i].type) {
                            case "number":
                            case "text":
                            case "hidden":
                            case "textarea":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').val($me.conditions[i].defaultValue || "").attr("disabled", $me.conditions[i].immutableAdd || false)
                                break;
                            case "date":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').val(l.dateFormat(new Date($me.conditions[i].defaultValue), $me.conditions[i].dateFmt) || "").attr("disabled", $me.conditions[i].immutableAdd || false)
                                break;
                            case "select":
                                $detailForm.find('[name=' + $me.conditions[i].name + ']').attr("disabled", $me.conditions[i].immutableAdd || false)
                                if ($me.conditions[i].ajax && $me.conditions[i].ajax.parent) {
                                    $me.selectList[$me.conditions[i].name] = []
                                    $.each($me.selectList[$me.conditions[i].ajax.parent][0].children, function (index, v) {
                                        $me.selectList[$me.conditions[i].name].push({
                                            value: v[$me.conditions[i].ajax.valueName || "value"] || "",
                                            text: v[$me.conditions[i].ajax.textName || "text"] || "",
                                            children: v[$me.conditions[i].ajax.childrenName || "children"] || [],
                                        })
                                    })
                                    $me.resetSelect($me.conditions[i].name, $me.selectList[$me.conditions[i].name])
                                } else {
                                    $detailForm.find('[name=' + $me.conditions[i].name + ']').val("")
                                }
                                break;
                            case "address":
                                var val = $me.conditions[i].defaultValue.split("_");
                                var $addressSelect = [$me.items[i].$dom.find("[name=address1]"), $me.items[i].$dom.find("[name=address2]"), $me.items[i].$dom.find("[name=address3]")]
                                var selectData = [];
                                $.each(val, function (ii, vv) {
                                    if (vv != "") {
                                        $addressSelect[ii].val(vv);
                                        if (ii == 0) {
                                            selectData[ii] = $me.updateSelect($me.address, $addressSelect[ii], $me.conditions[i].ajax);
                                        }
                                        if (ii != val.length - 1) {
                                            $.each(selectData[ii], function (j, m) {
                                                if (m.value == vv) {
                                                    selectData[ii + 1] = $me.updateSelect(m.children, $addressSelect[ii + 1], $me.conditions[i].ajax)
                                                }
                                            })
                                        }
                                    }
                                })
                                break
                            case "option":
                                $detailForm.find('.optionAdd').remove();
                                $detailForm.find('[name=content]').val($me.conditions[i].defaultValue || "")
                                break;
                            case "upload":
                                updateUploadList([])
                                break;
                            case "pickMember":
                                drawPickMember([], []);
                                break;
                            case "pickTree":
                                var _obj = $me.conditions[i];
                                var _d = {};
                                for (var key in _obj.pickType) {
                                    if (_obj.pickType[key]) {
                                        _d[key] = []
                                    }
                                }
                                myPickTree.drawCurData(_obj.name, _d)
                                break;
                        }
                    }
                }
            }
            $me.mylayer = layer.open({
                type: 1,
                title: data.layerTitle || ($me.isAdd ? '新增' : "详情"),
                area: ['800px', '80%'],
                content: $me
            });
        };
        $me.close = function () {
            layer.close($me.mylayer)
        };
        $me.resetSelect = function (name, sl) {
            var $select = $me.find("select[name=" + name + "]");
            $select.html("");
            for (var i = 0; i < sl.length; i++) {
                $select.append('<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>');
            }
        };
        $me.updateSelect = function (data, $s, ajax) {
            var _data = [];
            if (data && data.length > 0) {
                $.each(data, function (i, v) {
                    _data.push({
                        value: v[ajax.valueName],
                        text: v[ajax.textName],
                        children: v[ajax.childrenName],
                    })
                })
            }
            $s.html("").hide()
            if (_data.length > 0) {
                $.each(_data, function (i, v) {
                    $s.append('<option value="' + v.value + '" ' + ((v.selected) ? 'selected' : '') + '>' + v.text + '</option>');
                })
                $s.show()
            }
            return _data
        }
        $me.resetDefaultValue = function (name, vl) {
            for (var i = 0; i < $me.conditions.length; i++) {
                if ($me.conditions[i].name == name) {
                    $me.conditions[i].defaultValue = vl;
                    break;
                }

            }
        }
        $me.isHide = function (i) {
            var hideState = false;
            if ($me.conditions[i].controlHide) {
                var hideArr = $me.conditions[i].controlHide.split(",");
                for (var j = 0; j < hideArr.length; j++) {
                    if ($me.controlValue == hideArr[j]) {
                        hideState = true; break
                    }
                }
            }
            return hideState
        }
        $me.isLabel = function (i) {
            var labelState = false;
            if ($me.conditions[i].controlLabel) {
                var labelArr = $me.conditions[i].controlLabel.split(",");
                for (var j = 0; j < labelArr.length; j++) {
                    if ($me.controlValue == labelArr[j]) {
                        labelState = true; break
                    }
                }
            }
            return labelState
        }
        return $me
    }
})(jQuery, Lny)
