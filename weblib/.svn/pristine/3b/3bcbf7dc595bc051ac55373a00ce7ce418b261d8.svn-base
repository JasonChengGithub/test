//全局Lny
function Lny(apiNames) {
    this.domainName = "http://qyh.weidingplus.com/";
    this.loading = false;
    this.apiNames = apiNames
}
function onlyIntegerKeyPress(me, event) {
    event = event || window.event || arguments.callee.caller.arguments[0];
    //console.log(event);
    var charCode2;
    if ('charCode' in event) {//IE7 and IE8 no charCode
        charCode2 = event.charCode;
    } else {
        //console.log('no charCode');
        charCode2 = event.keyCode;
    }
    //console.log(charCode2);
    if (event.keyCode === 8/*back*/ || event.keyCode === 13/*Enter*/ || event.keyCode === 9/*Tab*/ || event.keyCode === 37/*<- */ || event.keyCode === 39/* ->*/) {
        return true;
    } else if (charCode2 < 48 || charCode2 > 57) {/*0-9*/
        event.returnValue = false;
        return false;
    } else {
        var num = $(me).val() + (charCode2 - 48);
        var max = $(me).attr("max") ? parseInt($(me).attr("max"), 10) : Number.MAX_VALUE;
        var min = parseInt($(me).attr("min"), 10)
        if (num >= min && num <= max) {
            return true;
        } else {
            return false;
        }
    }
};
!(function ($, L) {
    //AJAX跨域配置
    $.support.cors = true;
    L.prototype = {
        getTableCheckedData: function (table) {
            var checkBoxs = table.$("[name=checkbox]:checked")
            var checkedData = [];
            if (checkBoxs.length > 0) {
                for (var i = 0; i < checkBoxs.length; i++) {
                    checkedData.push(table.row(checkBoxs.eq(i).attr("data-rowIndex")).data())
                }
            }
            return checkedData
        },
        delTableRow: function (idKey, listKey, urlname, data, callback) {
            var params = {};
            var arr = []
            for (var i = 0; i < data.length; i++) {
                var param = {};
                param[idKey] = data[i][idKey]
                arr.push(param)
            }
            params[listKey] = arr;
            l.ajax(urlname, params, function (data) {
                callback(data)
            })
        },
        addApi: function (apis) {
            for (var key in apis) {
                this.apiNames[key] = apis[key]
            }
            return this.apiNames
        },
        getApiUrl: function (apiName) {
            if (!this.apiNames[apiName]) {
                console.log(apiName)
            }
            return this.domainName + this.apiNames[apiName]
        },
        getUrlParam: function (k) {//获取地址栏参数，k未键名
            var m = new RegExp("(^|&)" + k + "=([^&]*)(&|$)");
            var r = window.location.search.substr(1).match(m);
            if (r != null) return decodeURI(r[2]); return null;
        },
        dateFormat: function (d, fmt) {//格式化日期，d未new Date(),fmt为格式
            var o = {
                "M+": d.getMonth() + 1, //月份   
                "d+": d.getDate(), //日   
                "H+": d.getHours(), //小时   
                "m+": d.getMinutes(), //分   
                "s+": d.getSeconds(), //秒   
                "q+": Math.floor((d.getMonth() + 3) / 3), //季度   
                "S": d.getMilliseconds() //毫秒   
            };
            if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (d.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        },
        dateToUnix: function (d) {
            return new Date(Date.parse(d.toString().replace(/-/g, "/"))).getTime()
        },
        ajax: function (apiName, params, success) {
            var loader = layer.load(1, {
                shade: [0.3, '#000'] //0.1透明度的白色背景
            });
            $.ajax({
                url: this.getApiUrl(apiName),
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(params),
                contentType: "application/json; charset=utf-8",
                beforeSend: function (xhr) {
                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
                },
                complete: function (result) {
                    layer.close(loader)
                },
                error: function (result, status, error) {//服务器响应失败处理函数
                    console.log(error)
                },
                success: function (result) {
                    if (result.success) {
                        success(result.data, result.message)
                    } else {
                        console.log(result)
                        layer.alert(result.message, { icon: 0, }, function (index) {
                            layer.close(index);
                        });
                    }
                }
            })
        }
    }
    //其他配置
    //page默认配置
    if ($.fn.page) {
        $.fn.page.defaults = {
            pageSize: 10,
            pageBtnCount: 9,
            firstBtnText: '首页',
            lastBtnText: '尾页',
            prevBtnText: '上一页',
            nextBtnText: '下一页',
            showJump: true,
            jumpBtnText: 'GO',
            showPageSizes: true,
            pageSizeItems: [10, 20, 40],
            remote: {
                pageIndexName: 'currentPage',     //请求参数，当前页数，索引从1开始
                pageSizeName: 'pageSize',       //请求参数，每页数量
                totalName: 'totalNumber'              //指定返回数据的总数据量的字段名
            }
        };
    }
    $.fn.filterfrom = function (options) {
        var $me = this;
        var defaults = {
            maxLength: 5,
            conditions: [],
            onSearch: function () { },
            onReset: function () { }
        }
        options = $.extend({}, defaults, options)

        var tableHtml = '<table class="from-table"><tr>'
        var cArr = options.conditions;
        $me.selectList = {};
        $me.ajaxing = {};
        var createHtml = function (e) {
            var domHtml = '';
            switch (e.type) {
                case "text":
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input type="text" name="' + e.name + '" placeholder="' + (e.placeholder ? e.placeholder : '') + '" value="' + (e.defaultValue ? e.defaultValue : '') + '" class="input-text"></td>'
                    break
                case "number":
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input min="1" style="width:100%" type="number" name="' + e.name + '" placeholder="' + (e.placeholder ? e.placeholder : '') + '" value="' + (e.defaultValue ? e.defaultValue : '') + '" class="input-text"></td>'
                    break
                case "select":
                    var optionHtml = "", sl = [];
                    if (e.ajax) {
                        if (e.ajax.api) {
                            $me.ajaxing[e.name] = true;
                            l.ajax(e.ajax.api, {}, function (selectList) {
                                $me.selectList[e.name] = [];
                                $.each(selectList, function (index, v) {
                                    $me.selectList[e.name].push({
                                        value: v[e.ajax.valueName || "value"] || "",
                                        text: v[e.ajax.textName || "text"] || "",
                                        children: v[e.ajax.childrenName || "children"] || []
                                    })
                                })
                                $me.resetSelect(e.name, $me.selectList[e.name])
                                if (e.ajax.child) {
                                    $me.find("select[name=" + e.name + "]").on("change", function (event) {
                                        $.each($me.selectList[e.name], function (index, v) {
                                            if (v.value == event.target.value) {
                                                $me.selectList[e.ajax.child] = [];
                                                $.each(v.children, function (index2, v2) {
                                                    $me.selectList[e.ajax.child].push({
                                                        value: v2[e.ajax.valueName || "value"] || "",
                                                        text: v2[e.ajax.textName || "text"] || "",
                                                        children: v2[e.ajax.childrenName || "children"] || []
                                                    })
                                                })
                                                $me.resetSelect(e.ajax.child, $me.selectList[e.ajax.child])
                                            }
                                        })
                                    })
                                    $me.selectList[e.ajax.child] = [];
                                    $.each($me.selectList[e.name][0].children, function (index, v) {
                                        $me.selectList[e.ajax.child].push({
                                            value: v[e.ajax.valueName || "value"] || "",
                                            text: v[e.ajax.textName || "text"] || "",
                                            children: v[e.ajax.childrenName || "children"] || []
                                        })
                                    })
                                    $me.resetSelect(e.ajax.child, $me.selectList[e.ajax.child])
                                }
                                $me.ajaxing[e.name] = false;
                            })
                        } else if (e.ajax.parent && $me.selectList[e.name]) {

                            sl = $me.selectList[e.name]
                        }
                    } else {
                        $me.selectList[e.name] = e.selectList
                        sl = $me.selectList[e.name]
                    }
                    for (var i = 0; i < sl.length; i++) {
                        optionHtml += '<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>'
                    }
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><div class="select-box"><select class="select" size="1" name="' + e.name + '">' + optionHtml + '</select></div></td>'
                    break
                case "date":
                    var datePickerOption = (e.minDate ? 'minDate:' + e.minDate + ',' : '') + (e.maxDate ? 'maxDate:' + e.maxDate + ',' : '') + (e.dateFmt ? 'dateFmt:\'' + e.dateFmt + '\',' : '')
                    domHtml = '<td><label class="form-label">' + e.label + '：</label></td><td><input type="text" name="' + e.name + '" placeholder="" value="' + (e.defaultValue ? e.defaultValue : '') + '" onfocus="WdatePicker({' + datePickerOption + '})" id="' + e.id + '" class="input-text Wdate"></td>'
                    break
            }
            return domHtml
        }
        for (var i = 0; i < cArr.length; i++) {
            if (i % options.maxLength == 0 && i != 0) {
                tableHtml += '</tr><tr>'
            }
            tableHtml += createHtml(cArr[i]);
        }
        if (cArr.length % options.maxLength == 0) {
            tableHtml += '</tr><tr>'
        }
        tableHtml += '<td width="20"></td><td><button data-name="search" class="btn btn-primary" type="button"><i class="Hui-iconfont">&#xe709;</i> 查询</button><button data-name="reset" class="btn ml-20  btn-primary" type="button"><i class="Hui-iconfont">&#xe66c;</i> 重置</button></td>'
        tableHtml += '</tr></table>'
        var $table = $(tableHtml)
        $me.append($table)
        $me.on("click", "button", function () {
            var name = $(this).attr("data-name");
            switch (name) {
                case "search":
                    options.onSearch($me.serializeArray())
                    break;
                case "reset":
                    $me[0].reset()
                    options.onReset($me.serializeArray())
                    break;
            }
        })
        $me.resetSelect = function (name, sl) {
            var $select = $me.find("select[name=" + name + "]");
            $select.html("");
            for (var i = 0; i < sl.length; i++) {
                $select.append('<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>');
            }
        };
        return $me
    }
    $.fn.detailLayer = function (options) {
        var $me = this;
        // 参数配置start
        var defaults = {
            controlKey: null,
            conditions: [],
            onSave: function () { console.log("保存") },
            onAdd: function () { console.log("新增") },
        }
        options = $.extend({}, defaults, options);
        // 参数配置end

        //属性声明start
        $me.conditions = options.conditions;//环境参数
        $me.addCallback = options.onAdd;//新增回调函数
        $me.saveCallback = options.onSave;//新增保存函数
        // 特殊控制声明
        $me.controlKey = options.controlKey || null//根据哪个key来执行特殊控制
        $me.controlValue = null//哪些controlKey字段的value属性值执行特殊控制

        $me.isAdd = true;//是否是新增
        $me.mylayer = {};//弹出层对象
        $me.items = [];//表单子元素请求状态集合
        $me.selectList = {};//下拉列表数据集合
        $me.address = [];//地址数据
        $me.ajaxing = {};//ajaxing请求状态集合
        //属性声明end

        //结构构建start
        var $page = $('<div class="page-container" ></div>')//页面容器
        var $detailForm = $('<form class="form form-horizontal"></form>')//详情表单容器
        var $detailFormControlLine = $('<div class="row cl"></div>')//详情表单控制行
        var $detailFormControlBtnBox = $('<div class="col-9 f-l col-offset-2"></div>')//详情表单控制按钮组
        var $btnSave = $('<button data-name="save" class="btn btn-primary" type="button"><i class="Hui-iconfont">&#xe632;</i> 保存</button>')//保存按钮
        var $btnClose = $('<button data-name="close" class="btn btn-primary ml-10" type="button">&nbsp;&nbsp;取消&nbsp;&nbsp;</button>')//取消按钮
        $btnSave.on("click", function () {
            if ($me.isAdd) {
                $me.addCallback($me, $me.getDatas())
            } else {
                $me.saveCallback($me, $me.getDatas())
            }
        })
        $btnClose.on("click", function () {
            $me.close()
        })
        $detailFormControlBtnBox.append([$btnSave, $btnClose])
        $detailFormControlLine.append($detailFormControlBtnBox)

        //表单子元素构造函数start
        function FormItem(condition, key) {
            if (!condition.type) {
                console.warn("FormItem:key为" + key + "的type不存在")
            }
            if (!condition.name) {
                console.warn("FormItem:key为" + key + "的name不存在")
            }
            this.condition = condition;
            this.key = key;
            this.type = condition.type;//类型
            this.name = condition.name;//名字

            this.label = condition.label || "";//标题
            this.must = condition.must || false;//是否必填

            this.immutable = condition.immutable//仅编辑禁用
            this.immutableAdd = condition.immutableAdd//新增也禁用         

            this.defaultValue = condition.defaultValue//text,number,textarea,date,hidden类型特有
            this.placeholder = condition.placeholder//text,number,textarea,date类型特有
            this.ajax = condition.ajax//select,address,pickTree类型特有

            this.minDate = condition.minDate//date类型特有
            this.maxDate = condition.maxDate//date类型特有
            this.dateFmt = condition.dateFmt//date类型特有
            this.id = condition.id//date类型特有

            this.pickType = condition.pickType//pickTree类型特有
            this.noMultiple = condition.noMultiple//pickTree类型特有

            this.min = condition.min//number类型特有
            this.max = condition.max//number类型特有

            this.btnName = condition.btnName//upload类型特有
            this.fileType = condition.fileType//upload类型特有

            this.selectList = condition.selectList//selectList类型特有

            this.minOptionNum = condition.minOptionNum || 2;//option类型特有

            this.controlHide = condition.controlHide//类型特有
            this.controlLabel = condition.controlLabel//类型特有

            this.$dom = this.createDom()
            return this
        }
        FormItem.prototype.setValue = function (newValue) {
            var that = this;
            switch (that.type) {
                case "address":
                    var val = newValue || that.defaultValue || "";
                    var valArr = val.split("_")
                    var $addressSelect = [that.$dom.find("[name=" + that.name + "][data-addressName=address1]"), that.$dom.find("[name=" + that.name + "][data-addressName=address2]"), that.$dom.find("[name=" + that.name + "][data-addressName=address3]")]
                    var selectData = [];
                    $.each(valArr, function (ii, vv) {
                        if (vv != "") {
                            $addressSelect[ii].val(vv);
                            if (ii == 0) {
                                selectData[ii] = $me.updateSelect($me.address, $addressSelect[ii], that.ajax);
                            }
                            if (ii != valArr.length - 1) {
                                $.each(selectData[ii], function (j, m) {
                                    if (m.value == vv) {
                                        selectData[ii + 1] = $me.updateSelect(m.children, $addressSelect[ii + 1], that.ajax)
                                    }
                                })
                            }
                        }
                    })
                    break
                case "upload":
                    updateUploadList(newValue || [])
                    break;
                case "pickMember":
                    drawPickMember(newValue[0] || [], newValue[1] || []);
                    break;
                case "pickTree":
                    var d = {};
                    for (var key in that.pickType) {
                        if (that.pickType[key]) {
                            if (newValue) {
                                d[key] = newValue[that.pickType[key]]
                            } else {
                                d[key] = []
                            }
                        }
                    }
                    myPickTree.drawCurData(that.name, d)
                    break;
                case "date":
                    that.$dom.find("[name=" + that.name + "]").val(l.dateFormat(new Date(newValue || that.defaultValue || new Date()), that.dateFmt || "yyyy-mm-dd"))
                    break;
                case "option":
                    that.$dom.find('.optionAdd').remove();
                    that.$dom.find('[name=content]').val("")
                    var dataArr = newValue || that.defaultValue || []
                    for (var j = 0; j < dataArr.length; j++) {
                        if (j < that.minOptionNum) {
                            that.$dom.find('[name=content]').eq(j).val(dataArr[j].content || "")
                        } else {
                            var $optionAdd = $('<div class="mb-15 optionAdd" style="position:relative"><input type="text" name="content" value="' + dataArr[j].content + '" class="input-text"></div>')
                            var $removeBtn = $('<a title="删除" class="removeBtn" href="javascript:;" class="ml-5 delete" style="text-decoration: none;font-size: 20px;position: absolute;right: -25px;top: -1px;"><i class="icon Hui-iconfont"></i></a>')
                            $removeBtn.click(function () {
                                $(this).parents(".optionAdd").remove()
                            })
                            $optionAdd.append($removeBtn)
                            that.$dom.find('.optionAddBox').append($optionAdd)
                        }
                    }
                    break;
                default://hidden,text,number,textarea,select
                    that.$dom.find("[name=" + that.name + "]").val(newValue || that.defaultValue || "")
                    break;
            }
            return that
        }
        FormItem.prototype.setDisabled = function () {
            var that = this;
            var immutable = false;
            if ($me.isAdd) {
                immutable = that.immutableAdd || false
            } else {
                immutable = that.immutableAdd || that.immutable || false

            }
            that.$dom.find("[name=" + that.name + "]").attr("disabled", immutable);
            switch (that.type) {
                case "pickTree":
                    if (immutable) {
                        that.$dom.find(".remove").hide();
                        that.$dom.find(".pickTreeAdd").hide();
                    } else {
                        that.$dom.find(".remove").show();
                        that.$dom.find(".pickTreeAdd").show();
                    }
                    break;
                case "option":
                    if (immutable) {
                        that.$dom.find(".removeBtn").hide();
                        that.$dom.find(".addBtn").hide();
                    } else {
                        that.$dom.find(".removeBtn").show();
                        that.$dom.find(".addBtn").show();
                    }
                    break;
                default:
                    break;
            }
            return that
        }
        FormItem.prototype.getValue = function () {
            var that = this;
            var d = "";
            switch (that.type) {
                case "upload":
                case "pickMember":
                    console.log(that.type + "类型暂不可使用getValue")
                    break;
                case "address":
                    d = "";
                    d += (that.$dom.find("[data-addressName=address1]").val() ? that.$dom.find("[data-addressName=address1]").val() : "");
                    d += (that.$dom.find("[data-addressName=address2]").val() ? "_" + that.$dom.find("[data-addressName=address2]").val() : "");
                    d += (that.$dom.find("[data-addressName=address3]").val() ? "_" + that.$dom.find("[data-addressName=address3]").val() : "");
                    break
                case "pickTree":
                    d = myPickTree.getDataByName(that.name)
                    break
                case "option":
                    d = [];
                    var con = that.$dom.find('[name=content]')
                    for (var j = 0; j < con.length; j++) {
                        if ($.trim(con.eq(j).val()) != "") {
                            d.push({ "content": $.trim(con.eq(j).val()) })
                        }
                    }
                    break;
                default://hidden,text,number,textarea,select,date
                    d = that.$dom.find("[name=" + that.name + "]").val()
                    break;
            }
            return d
        }
        FormItem.prototype.createDom = function () {
            var that = this;
            var $domHtml = $('<div data-key="' + that.key + '"  class="row cl"><label class="form-label  col-2 f-l"><i style="color:red;' + (that.must ? '' : 'display:none') + '">* </i><span>' + that.label + '</span>：</label></div>')
            var $dom;
            switch (that.type) {
                case "hidden"://隐藏域
                    $dom = $('<div><input data-key="' + that.key + '" type="hidden" name="' + that.name + '" value="' + (that.defaultValue ? that.defaultValue : '') + '"></div>')
                    $domHtml = $dom;
                    break
                case "text"://单行文本
                    $dom = $('<div class="col-9 f-l"><input  type="text" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '" value="' + (that.defaultValue ? that.defaultValue : '') + '" class="input-text"></div>')
                    $domHtml.append($dom);
                    break
                case "number"://数字文本
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $num = $('<input min="' + (that.min ? that.min : 1) + '" max="' + (that.max ? that.max : "") + '" style="width:100%" onKeyUp="onlyIntegerKeyPress(this,event)" onKeyPress="return onlyIntegerKeyPress(this,event)" onpaste="return false"  type="text" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '" value="' + (that.defaultValue ? that.defaultValue : '') + '" class="input-text">')
                    $dom.append($num)
                    $domHtml.append($dom);
                    break
                case "textarea"://多行文本
                    $dom = $('<div class="col-9 f-l"><textarea class="textarea" name="' + that.name + '" placeholder="' + (that.placeholder ? that.placeholder : '') + '">' + (that.defaultValue ? that.defaultValue : '') + '</textarea></div>')
                    $domHtml.append($dom)
                    break
                case "date"://日期插件
                    var datePickerOption = (that.minDate ? 'minDate:' + that.minDate + ',' : '') + (that.maxDate ? 'maxDate:' + that.maxDate + ',' : '') + (that.dateFmt ? 'dateFmt:\'' + that.dateFmt + '\',' : '')
                    $dom = $('<div class="col-9 f-l"><input type="text" name="' + that.name + '" placeholder="" value="' + (that.defaultValue ? that.defaultValue : '') + '" onfocus="WdatePicker({' + datePickerOption + '})" id="' + that.id + '" class="input-text Wdate"></div>')
                    $domHtml.append($dom);
                    break
                case "select"://下拉列表
                    $dom = $('<div class="col-9 f-l"></div>')
                    var optionHtml = "", sl = [];
                    if (that.ajax) {
                        if (that.ajax.api) {
                            $me.ajaxing[that.name] = true;
                            l.ajax(that.ajax.api, {}, function (selectList) {
                                $me.selectList[that.name] = [];
                                $.each(selectList, function (index, v) {
                                    $me.selectList[that.name].push({
                                        value: v[that.ajax.valueName || "value"] || "",
                                        text: v[that.ajax.textName || "text"] || "",
                                        children: v[that.ajax.childrenName || "children"] || []
                                    })
                                })
                                $me.resetSelectHtml($me.selectList[that.name], $me.find("select[name=" + that.name + "]"))
                                if (that.ajax.child) {
                                    $me.find("select[name=" + that.name + "]").on("change", function (event) {
                                        $.each($me.selectList[that.name], function (index, v) {
                                            if (v.value == event.target.value) {
                                                $me.selectList[that.ajax.child] = [];
                                                $.each(v.children, function (index2, v2) {
                                                    $me.selectList[that.ajax.child].push({
                                                        value: v2[that.ajax.valueName || "value"] || "",
                                                        text: v2[that.ajax.textName || "text"] || "",
                                                        children: v2[that.ajax.childrenName || "children"] || []
                                                    })
                                                })
                                                $me.resetSelectHtml($me.selectList[that.ajax.child], $me.find("select[name=" + that.ajax.child + "]"))
                                            }
                                        })
                                    })
                                    $me.selectList[that.ajax.child] = [];
                                    $.each($me.selectList[that.name][0].children, function (index, v) {
                                        $me.selectList[that.ajax.child].push({
                                            value: v[that.ajax.valueName || "value"] || "",
                                            text: v[that.ajax.textName || "text"] || "",
                                            children: v[that.ajax.childrenName || "children"] || []
                                        })
                                    })
                                    $me.resetSelectHtml($me.selectList[that.ajax.child], $me.find("select[name=" + that.ajax.child + "]"))
                                }
                                $me.ajaxing[that.name] = false;
                            })
                        } else if (that.ajax.parent && $me.selectList[that.name]) {
                            sl = $me.selectList[that.name]
                        }
                    } else {
                        $me.selectList[that.name] = that.selectList
                        sl = $me.selectList[that.name]
                    }
                    for (var i = 0; i < sl.length; i++) {
                        optionHtml += '<option value="' + sl[i].value + '" ' + ((sl[i].selected) ? 'selected' : '') + '>' + sl[i].text + '</option>'
                    }
                    var $sel = $('<select name="' + that.name + '" value="' + that.defaultValue + '" class="select"></select>')
                    $sel.append(optionHtml)
                    $dom.append($sel);
                    $domHtml.append($dom);
                    break
                case "address"://地址联动
                    $dom = $('<div class="col-9 f-l row" style="margin-top: 0;padding-left:0;padding-right:0;margin-left:0"></div>');
                    var $col = $('<div class="f-l col-4"></div>')
                    var $addressSelect1 = $('<select name="' + that.name + '" data-addressName="address1" class="select"></select>')
                    var $addressSelect2 = $('<select name="' + that.name + '" data-addressName="address2" class="select"></select>')
                    var $addressSelect3 = $('<select name="' + that.name + '" data-addressName="address3" class="select"></select>')
                    var selectData1 = [];
                    var selectData2 = [];
                    var selectData3 = [];
                    $addressSelect1.on("change", function () {
                        var val = $(this).val()
                        $.each(selectData1, function (i, v) {
                            if (v.value == val) {
                                selectData2 = $me.updateSelect(v.children, $addressSelect2, that.ajax)
                                selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.ajax)
                            }
                        })
                    })
                    $addressSelect2.on("change", function () {
                        var val = $(this).val()
                        $.each(selectData2, function (i, v) {
                            if (v.value == val) {
                                selectData3 = $me.updateSelect(v.children, $addressSelect3, that.ajax)
                            }
                        })
                    })
                    if ($me.address.lenght > 0) {
                        selectData1 = $me.updateSelect($me.address, $addressSelect1, that.ajax)
                        selectData2 = $me.updateSelect(selectData1[0].children, $addressSelect2, that.ajax)
                        selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.ajax)
                    } else {
                        $me.ajaxing[that.name] = true;
                        l.ajax(that.ajax.api, {}, function (data) {
                            $me.address = data;
                            selectData1 = $me.updateSelect($me.address, $addressSelect1, that.ajax)
                            selectData2 = $me.updateSelect(selectData1[0].children, $addressSelect2, that.ajax)
                            selectData3 = $me.updateSelect(selectData2[0].children, $addressSelect3, that.ajax)
                            $me.ajaxing[that.name] = false;
                        })
                    }
                    $dom.append($col.clone().append($addressSelect1));
                    $dom.append($col.clone().append($addressSelect2));
                    $dom.append($col.clone().append($addressSelect3));
                    $domHtml.append($dom);
                    break;
                case "pickTree"://树形选择
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $pickTree = $('<div data-id="pickTree" data-name="' + that.name + '" class="pickTree"></div>')
                    var $pickTreeList = $('<ul data-id="pickTreeList" class="cl"></ul>')
                    var $pickTreeAdd = $('<button data-id="pickTreeAdd" class="pickTreeAdd" type="button"></button>')
                    myPickTree.initDataWidthName(that.name)
                    $pickTreeAdd.on("click", function () {
                        myPickTree.open(that.name, that.pickType)
                    })
                    $pickTree.append($pickTreeList);
                    $pickTree.append($pickTreeAdd);
                    $dom.append($pickTree);
                    $domHtml.append($dom);
                    break

                case "pickMember"://旧的成员选择
                    $dom = $('<div class="col-9 f-l"><div id="pickMember" class="pickMember"><ul id="pickMemberList" class="cl"></ul><button data-name="pickMemberAdd" class="pickMemberAdd" type="button"></button></div></div>')
                    $domHtml.append($dom);
                    break

                case "upload"://上传组件唯一
                    $dom = $('<div class="col-9 f-l"><div class="uploadFile"><ul class="uploadList"></ul><label style="position: relative;" for="uploadBtn" name="' + that.name + '" class="btn btn-primary size-S">' + (that.btnName ? that.btnName : '添加') + '<input  id="uploadBtn" data-fileType=\'' + JSON.stringify(that.fileType ? that.fileType : []) + '\' name="filesName" size="2" class="inputFile"  type="file" /></label><span class="ml-10">' + (that.fileType ? ('上传格式要求：' + JSON.stringify(that.fileType)) : '') + '</span></div></div>')
                    $domHtml.append($dom);
                    break
                case "option"://option
                    $dom = $('<div class="col-9 f-l"></div>')
                    var $option = $('<div class="mb-15 option" style="position:relative"><input type="text" name="content" placeholder="' + (that.placeholder ? that.placeholder : '') + '" class="input-text"></div>')
                    var $optionAddBox = $('<div class="optionAddBox"></div>')
                    var $optionAdd = $('<div class="mb-15 optionAdd" style="position:relative"><input type="text" name="content" placeholder="' + (that.placeholder ? that.placeholder : '') + '" class="input-text"></div>')
                    var $removeBtn = $('<a title="删除" class="removeBtn" href="javascript:;" class="ml-5 delete" style="text-decoration: none;font-size: 20px;position: absolute;right: -25px;top: -1px;"><i class="icon Hui-iconfont"></i></a>')
                    $removeBtn.click(function () {
                        $(this).parents(".optionAdd").remove()
                    })
                    $optionAdd.append($removeBtn.clone(true))
                    var $addBtn = $('<span class="addBtn btn btn-primary size-S"><i class="Hui-iconfont">&#xe600;</i> 添加选项</span>')
                    $addBtn.click(function () {
                        $optionAddBox.append($optionAdd.clone(true))
                    })
                    for (var i = 0; i < that.minOptionNum; i++) {
                        $optionAddBox.append($option.clone())
                    }
                    $dom.append($optionAddBox)
                    $dom.append($addBtn)
                    $domHtml.append($dom)
                    break
                default:
                    $dom = $('')
                    $domHtml.append($dom)
                    break
            }
            console.log("{key:" + that.key + ",name:" + that.name + ",type:" + that.type + "} create success!")
            return $domHtml
        }
        //表单子元素构造函数end

        $.each($me.conditions, function (index, condition) {
            if (condition) {
                var item = new FormItem(condition, index)
                $me.items.push(item);
                $detailForm.append(item.$dom);
            }
        })
        $detailForm.append($detailFormControlLine)
        $page.append($detailForm)
        $me.append($page)
        //结构构建send

        // 打开弹窗start
        $me.open = function (data) {
            if ($me.isInit()) {
                $me.setOpenData(data, $me._open)
            } else {
                layer.alert("数据正在初始化，请稍后再试！", { icon: 0, }, function (index) {
                    layer.close(index);
                });
            }
        }
        // 打开弹窗start

        // 判断数据是否初始化成功start
        $me.isInit = function () {
            for (var key in $me.ajaxing) {
                if ($me.ajaxing[key]) {
                    return false
                }
            }
            return true
        }
        // 判断数据是否初始化成功start

        // 设置弹窗打开形式start
        $me.setOpenData = function (data, callback) {
            if (!data) {
                data = { isAdd: true };
                $me.isAdd = true;
            } else if (data.isAdd) {
                $me.isAdd = true
            } else {
                $me.isAdd = false;
            }
            if ($me.controlKey) {
                $me.controlValue = data[$me.controlKey]
            }
            for (var i = 0; i < $me.items.length; i++) {
                if ($me.isHide($me.items[i])) {
                    $me.items[i].$dom.hide()
                } else {
                    $me.items[i].$dom.show()
                    if ($me.isLabel($me.items[i])) {//特殊
                        $me.items[i].$dom.find('label span').html($me.items[i].label + "(分)")
                    } else {
                        $me.items[i].$dom.find('label span').html($me.items[i].label)
                    }
                    $me.items[i].setDisabled();
                    switch ($me.items[i].type) {
                        case "select":
                            if (!$me.isAdd) {
                                if ($me.items[i].ajax && $me.items[i].ajax.parent) {
                                    $.each($me.selectList[$me.items[i].ajax.parent], function (index, v) {
                                        if (v.value == data[$me.items[i].ajax.parent]) {
                                            $me.selectList[$me.items[i].name] = [];
                                            $.each(v.children, function (index2, v2) {
                                                $me.selectList[$me.items[i].name].push({
                                                    value: v2[$me.items[i].ajax.valueName || "value"] || "",
                                                    text: v2[$me.items[i].ajax.textName || "text"] || "",
                                                    children: v2[$me.items[i].ajax.childrenName || "children"] || [],
                                                    selected: (v2[$me.items[i].ajax.valueName || "value"] == data[$me.items[i].name]) ? true : false,
                                                })
                                            })
                                            $me.resetSelectHtml($me.selectList[$me.items[i].name], $me.find("select[name=" + $me.items[i].name + "]"))
                                        }
                                    });
                                } else {
                                    $me.items[i].setValue(data[$me.items[i].name]);
                                }
                            } else {
                                if ($me.items[i].ajax && $me.items[i].ajax.parent) {
                                    $me.selectList[$me.items[i].name] = []
                                    $.each($me.selectList[$me.items[i].ajax.parent][0].children, function (index, v) {
                                        $me.selectList[$me.items[i].name].push({
                                            value: v[$me.items[i].ajax.valueName || "value"] || "",
                                            text: v[$me.items[i].ajax.textName || "text"] || "",
                                            children: v[$me.items[i].ajax.childrenName || "children"] || [],
                                        })
                                    })
                                    $me.resetSelectHtml($me.selectList[$me.items[i].name], $me.find("select[name=" + $me.items[i].name + "]"))
                                } else {
                                    $me.items[i].setValue("")
                                }
                            }
                            break;
                        case "pickMember":
                            $me.items[i].setValue([data["oaDepartmentList"], data["oaMemberList"]])
                            break;
                        default://hidden,text,number,textarea,date,address,option,pickTree,upload
                            $me.items[i].setValue(data[$me.items[i].name]);
                            break
                    }
                }
            }
            if (callback) {
                callback(data.layerTitle)
            }
        };
        // 设置弹窗打开形式end

        // 打开弹窗start
        $me._open = function (layerTitle) {
            $me.mylayer = layer.open({
                type: 1,
                title: layerTitle || ($me.isAdd ? '新增' : "详情"),
                area: ['800px', '80%'],
                content: $me
            });
        };
        // 打开弹窗end

        // 获取数据start
        $me.getDatas = function () {
            var dataObj = {};
            for (var i = 0; i < $me.items.length; i++) {
                if (!$me.isHide($me.items[i])) {
                    switch ($me.items[i].type) {
                        case "option":
                            var d = $me.items[i].getValue()
                            if ($me.items[i].must && d.length < $me.items[i].minOptionNum) {
                                layer.alert("至少添加" + $me.items[i].minOptionNum + "个选项！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            dataObj[$me.items[i].name] = d;
                            break
                        case "pickMember":
                            if ($me.items[i].must && getPickMember("department").length == 0 && getPickMember("member").length == 0) {
                                layer.alert($me.items[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            dataObj["oaDepartmentList"] = getPickMember("department")
                            dataObj["oaMemberList"] = getPickMember("member")
                            break;

                        case "upload":
                            dataObj[$me.items[i].name] = getUploadList()
                            break;
                        case "pickTree":
                            var d = $me.items[i].getValue()
                            var len = 0;
                            dataObj[$me.items[i].name] = {};
                            for (var key in $me.items[i].pickType) {
                                if ($me.items[i].pickType[key]) {
                                    len = len + d[key].length;
                                    dataObj[$me.items[i].name][$me.items[i].pickType[key]] = d[key];
                                }
                            }
                            if ($me.items[i].must && len == 0) {
                                layer.alert($me.items[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            if ($me.items[i].noMultiple && len > 1) {
                                layer.alert($me.items[i].label + "只能选择一个", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return
                            }
                            break;
                        default://hidden,text,number,textarea,date,select,address
                            var d = $me.items[i].getValue()
                            if ($me.items[i].must && $.trim(d) == "") {
                                layer.alert($me.items[i].label + "不能为空！", { icon: 0, }, function (index) {
                                    layer.close(index);
                                });
                                return false
                            }
                            dataObj[$me.items[i].name] = $me.items[i].type == "date" ? l.dateToUnix(d) : d
                            break
                    }
                }
            }
            return dataObj
        }
        // 获取数据end

        // 关闭弹窗start
        $me.close = function () {
            layer.close($me.mylayer)
        };
        // 关闭弹窗end
        // 重置下拉列表内容start
        $me.resetSelectHtml = function (data, $s) {
            $s.html("");
            if (data) {
                $.each(data, function (i, v) {
                    $s.append('<option value="' + v.value + '" ' + ((v.selected) ? 'selected' : '') + '>' + v.text + '</option>');
                })
            }
            return $s
        };
        // 重置下拉列表内容end

        // 刷新联动下拉列表数据start
        $me.updateSelect = function (data, $s, ajax) {
            var d = [];
            if (data && data.length > 0) {
                $.each(data, function (i, v) {
                    d.push({
                        value: v[ajax.valueName],
                        text: v[ajax.textName],
                        children: v[ajax.childrenName],
                    })
                })
            }
            if (d.length > 0) {
                $me.resetSelectHtml(d, $s).show()
            } else {
                $me.resetSelectHtml(d, $s).hide()
            }
            return d
        }
        // 刷新联动下拉列表数据start

        // 重置默认值start
        $me.resetDefaultValue = function (name, newDefaultValue) {
            for (var i = 0; i < $me.items.length; i++) {
                if ($me.items[i].name == name) {
                    $me.items[i].defaultValue = newDefaultValue;
                    break;
                }
            }
        }
        // 重置默认值end

        // 根据controlValue字段判断是否隐藏start
        $me.isHide = function (item) {
            var hideState = false;
            if (item.controlHide) {
                var hideArr = item.controlHide.split(",");
                for (var j = 0; j < hideArr.length; j++) {
                    if ($me.controlValue == hideArr[j]) {
                        hideState = true; break
                    }
                }
            }
            return hideState
        }
        // 根据controlValue字段判断是否隐藏end

        // 根据controlValue字段判断是否改变Label start
        $me.isLabel = function (item) {
            var labelState = false;
            if (item.controlLabel) {
                var labelArr = item.controlLabel.split(",");
                for (var j = 0; j < labelArr.length; j++) {
                    if ($me.controlValue == labelArr[j]) {
                        labelState = true; break
                    }
                }
            }
            return labelState
        }
        // 根据controlValue字段判断是否改变Label end
        return $me
    }
})(jQuery, Lny)
